import pytest

from utils.faker import Fake
from settings import *

f = Fake()

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки получения списка физических лиц под ролями, которым разрешено получение списка. 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_read_persons = (
    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_AIB}"',
                 (200, 'OK'),
                 marks=pytest.mark.smoke),

    pytest.param((ROLE_NAME_AIS, LOGIN_AIS, PASSWORD_AIS, EMAIL_ACCOUNT_AIS),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_AIS}"',
                 (200, 'OK'),
                 marks=pytest.mark.smoke),
)

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки получения списка физических лиц под ролями, которым запрещено получение списка. 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_not_read_persons = (
    pytest.param((ROLE_NAME_ASH, LOGIN_ASH, PASSWORD_ASH, EMAIL_ACCOUNT_ASH),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_ASH}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_PSH, LOGIN_PSH, PASSWORD_PSH, EMAIL_ACCOUNT_PSH),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_PSH}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AMNS, LOGIN_AMNS, PASSWORD_AMNS, EMAIL_ACCOUNT_AMNS),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_AMNS}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_OAMNS, LOGIN_OAMNS, PASSWORD_OAMNS, EMAIL_ACCOUNT_OAMNS),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_OAMNS}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_RAMNS, LOGIN_RAMNS, PASSWORD_RAMNS, EMAIL_ACCOUNT_RAMNS),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_RAMNS}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_PMNS, LOGIN_PMNS, PASSWORD_PMNS, EMAIL_ACCOUNT_PMNS),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_PMNS}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AGTK, LOGIN_AGTK, PASSWORD_AGTK, EMAIL_ACCOUNT_AGTK),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_AGTK}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_PGTK, LOGIN_PGTK, PASSWORD_PGTK, EMAIL_ACCOUNT_PGTK),
                 f'Получить список физических лиц под ролью "{ROLE_NAME_PGTK}"',
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),
)

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки создания физического лица под ролями, которым разрешено создание физического лица.
Для создания физического лица используются комбинации валидных значений параметров. 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_create_person_valid_param = (
    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (левая граница)',
                 (f.text('*person_first_name', 'min', 'valid'),
                  f.text('*person_last_name', 'min', 'valid'),
                  f.text('person_patronymic', 'min', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'min', 'valid'),
                  f.text('person_phone', 'min', 'valid'),
                  f.text('*person_email', 'min', 'valid'),
                  f.text('person_key_id', 'min', 'valid'),
                  f.text('person_card_id', 'min', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (справа от левой границы)',
                 (f.text('*person_first_name', '>min', 'valid'),
                  f.text('*person_last_name', '>min', 'valid'),
                  f.text('person_patronymic', '>min', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', '>min', 'valid'),
                  f.text('person_phone', '>min', 'valid'),
                  f.text('*person_email', '>min', 'valid'),
                  f.text('person_key_id', '>min', 'valid'),
                  f.text('person_card_id', '>min', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.smoke),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (слева от правой границы)',
                 (f.text('*person_first_name', '<max', 'valid'),
                  f.text('*person_last_name', '<max', 'valid'),
                  f.text('person_patronymic', '<max', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', '<max', 'valid'),
                  f.text('person_phone', '<max', 'valid'),
                  f.text('*person_email', '<max', 'valid'),
                  f.text('person_key_id', '<max', 'valid'),
                  f.text('person_card_id', '<max', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (правая граница)',
                 (f.text('*person_first_name', 'max', 'valid'),
                  f.text('*person_last_name', 'max', 'valid'),
                  f.text('person_patronymic', 'max', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'max', 'valid'),
                  f.text('person_phone', 'max', 'valid'),
                  f.text('*person_email', 'max', 'valid'),
                  f.text('person_key_id', 'max', 'valid'),
                  f.text('person_card_id', 'max', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIS, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (левая граница)',
                 (f.text('*person_first_name', 'min', 'valid'),
                  f.text('*person_last_name', 'min', 'valid'),
                  f.text('person_patronymic', 'min', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'min', 'valid'),
                  f.text('person_phone', 'min', 'valid'),
                  f.text('*person_email', 'min', 'valid'),
                  f.text('person_key_id', 'min', 'valid'),
                  f.text('person_card_id', 'min', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIS, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (справа от левой границы)',
                 (f.text('*person_first_name', '>min', 'valid'),
                  f.text('*person_last_name', '>min', 'valid'),
                  f.text('person_patronymic', '>min', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', '>min', 'valid'),
                  f.text('person_phone', '>min', 'valid'),
                  f.text('*person_email', '>min', 'valid'),
                  f.text('person_key_id', '>min', 'valid'),
                  f.text('person_card_id', '>min', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIS, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.smoke),

    pytest.param((ROLE_NAME_AIS, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (слева от правой границы)',
                 (f.text('*person_first_name', '<max', 'valid'),
                  f.text('*person_last_name', '<max', 'valid'),
                  f.text('person_patronymic', '<max', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', '<max', 'valid'),
                  f.text('person_phone', '<max', 'valid'),
                  f.text('*person_email', '<max', 'valid'),
                  f.text('person_key_id', '<max', 'valid'),
                  f.text('person_card_id', '<max', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIS, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с валидными значениями параметров (правая граница)',
                 (f.text('*person_first_name', 'max', 'valid'),
                  f.text('*person_last_name', 'max', 'valid'),
                  f.text('person_patronymic', 'max', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'max', 'valid'),
                  f.text('person_phone', 'max', 'valid'),
                  f.text('*person_email', 'max', 'valid'),
                  f.text('person_key_id', 'max', 'valid'),
                  f.text('person_card_id', 'max', 'valid')),
                 (201, 'Created'),
                 marks=pytest.mark.critical_path),
)

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки отказа в создании физического лица под ролями, которым запрещено создание физического 
лица. Для создания физического лица используются комбинации валидных значений параметров. 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_not_create_person_valid_param = (
    pytest.param((ROLE_NAME_ASH, LOGIN_ASH, PASSWORD_ASH, EMAIL_ACCOUNT_ASH),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_PSH, LOGIN_PSH, PASSWORD_PSH, EMAIL_ACCOUNT_PSH),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AMNS, LOGIN_AMNS, PASSWORD_AMNS, EMAIL_ACCOUNT_AMNS),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_OAMNS, LOGIN_OAMNS, PASSWORD_OAMNS, EMAIL_ACCOUNT_OAMNS),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_RAMNS, LOGIN_RAMNS, PASSWORD_RAMNS, EMAIL_ACCOUNT_RAMNS),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_PMNS, LOGIN_PMNS, PASSWORD_PMNS, EMAIL_ACCOUNT_PMNS),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AGTK, LOGIN_AGTK, PASSWORD_AGTK, EMAIL_ACCOUNT_AGTK),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_PGTK, LOGIN_PGTK, PASSWORD_PGTK, EMAIL_ACCOUNT_PGTK),
                 'Создать физическое лицо с валидными значениями параметров (внутри границ)',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (403, 'Forbidden', {'detail': 'У вас недостаточно прав для выполнения данного действия.'}),
                 marks=pytest.mark.critical_path),
)

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки отказа в создании физического лица под ролями, которым разрешено создание физического
лица, но для создания физического лица используется комбинации с пустыми значениями обязательных для заполнения 
параметров: фамилия, имя, email. 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_not_create_person_empty_param_required = (
    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с пустыми значением поля first_name',
                 (f.text('*person_first_name', '', 'invalid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'first_name': ['Это поле не может быть пустым.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с пустыми значением last_name',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', '', 'invalid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'last_name': ['Это поле не может быть пустым.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с пустыми значением параметра sex',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', '', 'invalid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 # TODO Некорректное сообщение об ошибке. Оптимально - "Это поле не может быть пустым."
                 (400, 'Bad Request', {'sex': ['Значения  нет среди допустимых вариантов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра sex, состоящем из пробелов',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', '   ', 'invalid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 # TODO Некорректное сообщение об ошибке. Оптимально - "Это поле не может быть пустым."
                 (400, 'Bad Request', {'sex': ['Значения  нет среди допустимых вариантов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением None параметра sex',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', None, 'invalid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'sex': ['Это поле не может быть пустым.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с пустыми значением email',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', '', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'email': ['Вы не можете создать физическое лицо с пустым email.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с пустыми значениями first_name, last_name, email',
                 (f.text('*person_first_name', '', 'valid'),
                  f.text('*person_last_name', '', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', '', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'first_name': ['Это поле не может быть пустым.'],
                                       'last_name': ['Это поле не может быть пустым.'],
                                       'email': ['Вы не можете создать физическое лицо с пустым email.']}),
                 marks=pytest.mark.critical_path),
)

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки отказа в создании физического лица под ролями, которым разрешено создание физического
лица, но для создания физического лица используется комбинации с не валидными значениями параметров (внутри границ) 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_not_create_person_invalid_param = (
    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра first_name, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'invalid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'first_name': ['Имя должно содержать только буквы кириллицы, '
                                                      'пробел и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра last_name, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'invalid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'last_name': ['Фамилия не должна содержать пробелов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра patronymic, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'invalid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'patronymic': ['Отчество должно содержать только буквы кириллицы, '
                                                      'пробел и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра sex, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', -1, 'invalid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'sex': ['Значения -1 нет среди допустимых вариантов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра sex, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 2, 'invalid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'sex': ['Значения 2 нет среди допустимых вариантов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра sex, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 11, 'invalid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'sex': ['Значения 11 нет среди допустимых вариантов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра sex, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'ZsЯщ@5', 'invalid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'sex': ['Значения ZsЯщ@5 нет среди допустимых вариантов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра birth_date, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'invalid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'birth_date': ['Неправильный формат date. Используйте один '
                                                      'из этих форматов: YYYY-MM-DD, DD.MM.YYYY.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра birth_date, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'invalid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'birth_date': ['Неправильный формат date. Используйте один '
                                                      'из этих форматов: YYYY-MM-DD, DD.MM.YYYY.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра phone, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'invalid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'phone': ['Телефон может содержать до 12 цифр без пробелов; '
                                                 'допускается символ «+» в начале строки.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра email, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'invalid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'email': ['Введите правильный адрес электронной почты.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра key_id, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'invalid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'key_id': ['Идентификатор ключа должен содержать '
                                                  'только латинские буквы и цифры']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо с не валидным значением параметра card_id, находящемся внутри границ',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'invalid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'card_id ': ['Идентификатор ID карты должен содержать '
                                                    'только латинские буквы и цифры']}),
                 marks=pytest.mark.critical_path),
)

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки отказа в создании физического лица под ролями, которым разрешено создание 
физического лица, но для создания физического лица используется комбинации с валидными значениями параметров, 
которые вышли за нижнюю или верхнюю границы. 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_not_create_person_valid_param_out_of_limits = (
    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра first_name, состоящего из валидных '
                 'символов длиной меньше min',
                 (f.text('*person_first_name', '<min', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'first_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра first_name, состоящего из валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', '>max', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'first_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра last_name, состоящего из валидных '
                 'символов длиной меньше min',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', '<min', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'last_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра last_name, состоящего из валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', '>max', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'last_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра patronymic, состоящего из валидных '
                 'символов длиной меньше min',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', '<min', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'patronymic': ['Убедитесь, что это значение содержит от 2 до 50 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра patronymic, состоящего из валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', '>max', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'patronymic': ['Убедитесь, что это значение содержит от 2 до 50 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра phone, состоящего из валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', '>max', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'phone': ['Убедитесь, что это значение содержит не более 13 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра email, состоящего из валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', '>max', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'email': ['Убедитесь, что это значение содержит не более 254 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра key_id, состоящего из валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', '>max', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'key_id': ['Убедитесь, что это значение содержит не более 40 символов.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра card_id, состоящего из валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', '>max', 'valid')),
                 (400, 'Bad Request', {'card_id': ['Убедитесь, что это значение содержит не более 40 символов.']}),
                 marks=pytest.mark.critical_path),
)

"""
Тестовые данные для параметризованных api-тестов. 
Данные предназначены для проверки отказа в создании физического лица под ролями, которым разрешено создание 
физического лица, но для создания физического лица используется комбинации с валидными значениями параметров, 
которые вышли за нижнюю или верхнюю границы. 
Структура кортежа: user (учетные данные пользователя), parameter_description (описание набора параметров для 
allure.step), expected_result (ожидаемый ответ сервера).
"""
test_data_api_can_not_create_person_invalid_param_out_of_limits = (
    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра first_name, состоящего из '
                 'не валидных символов длиной меньше min',
                 (f.text('*person_first_name', '<min', 'invalid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request',
                  {'first_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.',
                                  'Имя должно содержать только буквы кириллицы, пробел и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра first_name, состоящего из '
                 'не валидных символов длиной больше max',
                 (f.text('*person_first_name', '>max', 'invalid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request',
                  {'first_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.',
                                  'Имя должно содержать только буквы кириллицы, пробел и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра last_name, состоящего из '
                 'не валидных символов длиной меньше min',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', '<min', 'invalid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request',
                  {'last_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.',
                                 'Фамилия не должна содержать пробелов.',
                                 'Фамилия должна содержать только буквы кириллицы и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра last_name, состоящего из '
                 'не валидных символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', '>max', 'invalid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request',
                  {'last_name': ['Убедитесь, что это значение содержит от 2 до 50 символов.',
                                 'Фамилия не должна содержать пробелов.',
                                 'Фамилия должна содержать только буквы кириллицы и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра patronymic, состоящего из '
                 'не валидных символов длиной меньше min',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', '<min', 'invalid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request',
                  {'patronymic': ['Убедитесь, что это значение содержит от 2 до 50 символов.',
                                  'Отчество должно содержать только буквы кириллицы, пробел и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра patronymic, состоящего из '
                 'не валидных символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', '>max', 'invalid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request',
                  {'patronymic': ['Убедитесь, что это значение содержит от 2 до 50 символов.',
                                  'Отчество должно содержать только буквы кириллицы, пробел и знак дефиса.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра phone, состоящего из не валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', '>max', 'invalid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'phone': ['Убедитесь, что это значение содержит не более 13 символов.',
                                                 'Телефон может содержать до 12 цифр без пробелов; '
                                                 'допускается символ «+» в начале строки.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра email, состоящего из не валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', '>max', 'invalid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request', {'email': ['Убедитесь, что это значение содержит не более 254 символов.',
                                                 'Введите правильный адрес электронной почты.']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра key_id, состоящего из не валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', '>max', 'invalid'),
                  f.text('person_card_id', 'n', 'valid')),
                 (400, 'Bad Request',
                  {'key_id': ['Убедитесь, что это значение содержит не более 40 символов.',
                              'Идентификатор ключа должен содержать только латинские буквы и цифры']}),
                 marks=pytest.mark.critical_path),

    pytest.param((ROLE_NAME_AIB, LOGIN_AIB, PASSWORD_AIB, EMAIL_ACCOUNT_AIB),
                 'Создать физическое лицо со значением параметра card_id, состоящего из не валидных '
                 'символов длиной больше max',
                 (f.text('*person_first_name', 'n', 'valid'),
                  f.text('*person_last_name', 'n', 'valid'),
                  f.text('person_patronymic', 'n', 'valid'),
                  f.drop_down_list('person_sex', 'n', 'valid'),
                  f.date('person_birthday', 'n', 'valid'),
                  f.text('person_phone', 'n', 'valid'),
                  f.text('*person_email', 'n', 'valid'),
                  f.text('person_key_id', 'n', 'valid'),
                  f.text('person_card_id', '>max', 'invalid')),
                 (400, 'Bad Request',
                  {'card_id': ['Убедитесь, что это значение содержит не более 40 символов.',
                               'Идентификатор ID карты должен содержать только латинские буквы и цифры']}),
                 marks=pytest.mark.critical_path),
)
















